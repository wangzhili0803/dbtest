apply plugin: 'com.android.application'
// 依赖插件脚本
apply from: 'tinker-support.gradle'

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //    compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    //    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    // 升级SDK
//    compile files('libs/commons-lang.jar')
    //    compile files('libs/Volley.jar')
//    compile files('libs/android-async-http-1.4.6.jar')
//    compile files('libs/ksoap2-android-assembly-3.0.0-jar-with-dependencies.jar')
    //Retrofit2所需要的包
    //ConverterFactory的Gson依赖包
    //ConverterFactory的String依赖包
    //以下SDK开发者请根据需要自行选择
    //如果你想应用能够兼容Android6.0，请添加此依赖(org.apache.http.legacy.jar)
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:multidex:1.0.1'
    //注释掉原有bugly的仓库
    //compile 'com.tencent.bugly:crashreport:latest.release'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.3.2
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.2.0
    compile 'com.tencent.bugly:nativecrashreport:latest.release' //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0

    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4'
    compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta4'
    compile 'com.squareup.retrofit2:converter-scalars:2.0.0-beta4'
    compile 'cn.bmob.android:http-legacy:1.0'
    compile 'com.google.android.gms:play-services-appindexing:9.8.0'
    compile 'io.reactivex:rxjava:1.2.6'
    compile 'io.reactivex:rxandroid:1.2.1'
    testCompile 'junit:junit:4.12'
}

def javaVersion = JavaVersion.VERSION_1_7

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    //recommend
    dexOptions {
        jumboMode = true
    }

    signingConfigs {
        release {
            try {
                storeFile file("./keystore/release.keystore")
                storePassword "testres"
                keyAlias "testres"
                keyPassword "testres"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }

        debug {
            storeFile file("./keystore/debug.keystore")
        }
    }

    defaultConfig {
        applicationId "com.jerry.dbtest"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "1.0.0"
        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement
         */
        multiDexEnabled true
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    buildTypes {

        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}
