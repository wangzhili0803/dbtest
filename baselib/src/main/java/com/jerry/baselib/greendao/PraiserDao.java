package com.jerry.baselib.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jerry.baselib.common.bean.Praiser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRAISER".
*/
public class PraiserDao extends AbstractDao<Praiser, Long> {

    public static final String TABLENAME = "PRAISER";

    /**
     * Properties of entity Praiser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property SuperLike = new Property(2, int.class, "superLike", false, "SUPER_LIKE");
        public final static Property Collect = new Property(3, int.class, "collect", false, "COLLECT");
        public final static Property Want = new Property(4, int.class, "want", false, "WANT");
        public final static Property IsSel = new Property(5, boolean.class, "isSel", false, "IS_SEL");
        public final static Property UpdateTime = new Property(6, long.class, "updateTime", false, "UPDATE_TIME");
    }


    public PraiserDao(DaoConfig config) {
        super(config);
    }
    
    public PraiserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRAISER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"SUPER_LIKE\" INTEGER NOT NULL ," + // 2: superLike
                "\"COLLECT\" INTEGER NOT NULL ," + // 3: collect
                "\"WANT\" INTEGER NOT NULL ," + // 4: want
                "\"IS_SEL\" INTEGER NOT NULL ," + // 5: isSel
                "\"UPDATE_TIME\" INTEGER NOT NULL );"); // 6: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRAISER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Praiser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getSuperLike());
        stmt.bindLong(4, entity.getCollect());
        stmt.bindLong(5, entity.getWant());
        stmt.bindLong(6, entity.getIsSel() ? 1L: 0L);
        stmt.bindLong(7, entity.getUpdateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Praiser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getSuperLike());
        stmt.bindLong(4, entity.getCollect());
        stmt.bindLong(5, entity.getWant());
        stmt.bindLong(6, entity.getIsSel() ? 1L: 0L);
        stmt.bindLong(7, entity.getUpdateTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Praiser readEntity(Cursor cursor, int offset) {
        Praiser entity = new Praiser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // superLike
            cursor.getInt(offset + 3), // collect
            cursor.getInt(offset + 4), // want
            cursor.getShort(offset + 5) != 0, // isSel
            cursor.getLong(offset + 6) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Praiser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSuperLike(cursor.getInt(offset + 2));
        entity.setCollect(cursor.getInt(offset + 3));
        entity.setWant(cursor.getInt(offset + 4));
        entity.setIsSel(cursor.getShort(offset + 5) != 0);
        entity.setUpdateTime(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Praiser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Praiser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Praiser entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
