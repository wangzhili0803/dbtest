package com.jerry.baselib.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jerry.baselib.common.bean.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, String> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderId = new Property(0, String.class, "orderId", true, "ORDER_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Tel = new Property(2, String.class, "tel", false, "TEL");
        public final static Property Addr = new Property(3, String.class, "addr", false, "ADDR");
        public final static Property Nickname = new Property(4, String.class, "nickname", false, "NICKNAME");
        public final static Property AliPayId = new Property(5, String.class, "aliPayId", false, "ALI_PAY_ID");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property Logisticsid = new Property(8, String.class, "logisticsid", false, "LOGISTICSID");
        public final static Property Logisticscm = new Property(9, String.class, "logisticscm", false, "LOGISTICSCM");
        public final static Property IsSel = new Property(10, boolean.class, "isSel", false, "IS_SEL");
    }


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"ORDER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: orderId
                "\"NAME\" TEXT," + // 1: name
                "\"TEL\" TEXT," + // 2: tel
                "\"ADDR\" TEXT," + // 3: addr
                "\"NICKNAME\" TEXT," + // 4: nickname
                "\"ALI_PAY_ID\" TEXT," + // 5: aliPayId
                "\"TIME\" TEXT," + // 6: time
                "\"TITLE\" TEXT," + // 7: title
                "\"LOGISTICSID\" TEXT," + // 8: logisticsid
                "\"LOGISTICSCM\" TEXT," + // 9: logisticscm
                "\"IS_SEL\" INTEGER NOT NULL );"); // 10: isSel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(1, orderId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(3, tel);
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(4, addr);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        String aliPayId = entity.getAliPayId();
        if (aliPayId != null) {
            stmt.bindString(6, aliPayId);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String logisticsid = entity.getLogisticsid();
        if (logisticsid != null) {
            stmt.bindString(9, logisticsid);
        }
 
        String logisticscm = entity.getLogisticscm();
        if (logisticscm != null) {
            stmt.bindString(10, logisticscm);
        }
        stmt.bindLong(11, entity.getIsSel() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(1, orderId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(3, tel);
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(4, addr);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        String aliPayId = entity.getAliPayId();
        if (aliPayId != null) {
            stmt.bindString(6, aliPayId);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String logisticsid = entity.getLogisticsid();
        if (logisticsid != null) {
            stmt.bindString(9, logisticsid);
        }
 
        String logisticscm = entity.getLogisticscm();
        if (logisticscm != null) {
            stmt.bindString(10, logisticscm);
        }
        stmt.bindLong(11, entity.getIsSel() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // orderId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // addr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // aliPayId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // logisticsid
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // logisticscm
            cursor.getShort(offset + 10) != 0 // isSel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setOrderId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAliPayId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLogisticsid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLogisticscm(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsSel(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(Order entity, long rowId) {
        return entity.getOrderId();
    }
    
    @Override
    public String getKey(Order entity) {
        if(entity != null) {
            return entity.getOrderId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order entity) {
        return entity.getOrderId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
