package com.jerry.baselib.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jerry.baselib.common.bean.DyUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DY_USER".
*/
public class DyUserDao extends AbstractDao<DyUser, Void> {

    public static final String TABLENAME = "DY_USER";

    /**
     * Properties of entity DyUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DyId = new Property(0, String.class, "dyId", false, "DY_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Praise = new Property(2, String.class, "praise", false, "PRAISE");
        public final static Property Follow = new Property(3, String.class, "follow", false, "FOLLOW");
        public final static Property Fans = new Property(4, String.class, "fans", false, "FANS");
        public final static Property UpdateTime = new Property(5, long.class, "updateTime", false, "UPDATE_TIME");
    }


    public DyUserDao(DaoConfig config) {
        super(config);
    }
    
    public DyUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DY_USER\" (" + //
                "\"DY_ID\" TEXT," + // 0: dyId
                "\"NAME\" TEXT," + // 1: name
                "\"PRAISE\" TEXT," + // 2: praise
                "\"FOLLOW\" TEXT," + // 3: follow
                "\"FANS\" TEXT," + // 4: fans
                "\"UPDATE_TIME\" INTEGER NOT NULL );"); // 5: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DY_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DyUser entity) {
        stmt.clearBindings();
 
        String dyId = entity.getDyId();
        if (dyId != null) {
            stmt.bindString(1, dyId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String praise = entity.getPraise();
        if (praise != null) {
            stmt.bindString(3, praise);
        }
 
        String follow = entity.getFollow();
        if (follow != null) {
            stmt.bindString(4, follow);
        }
 
        String fans = entity.getFans();
        if (fans != null) {
            stmt.bindString(5, fans);
        }
        stmt.bindLong(6, entity.getUpdateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DyUser entity) {
        stmt.clearBindings();
 
        String dyId = entity.getDyId();
        if (dyId != null) {
            stmt.bindString(1, dyId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String praise = entity.getPraise();
        if (praise != null) {
            stmt.bindString(3, praise);
        }
 
        String follow = entity.getFollow();
        if (follow != null) {
            stmt.bindString(4, follow);
        }
 
        String fans = entity.getFans();
        if (fans != null) {
            stmt.bindString(5, fans);
        }
        stmt.bindLong(6, entity.getUpdateTime());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DyUser readEntity(Cursor cursor, int offset) {
        DyUser entity = new DyUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // dyId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // praise
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // follow
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fans
            cursor.getLong(offset + 5) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DyUser entity, int offset) {
        entity.setDyId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPraise(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFollow(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFans(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateTime(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DyUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DyUser entity) {
        return null;
    }

    @Override
    public boolean hasKey(DyUser entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
