package com.jerry.baselib.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jerry.baselib.common.bean.CoinOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COIN_ORDER".
*/
public class CoinOrderDao extends AbstractDao<CoinOrder, Void> {

    public static final String TABLENAME = "COIN_ORDER";

    /**
     * Properties of entity CoinOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderId = new Property(0, String.class, "orderId", false, "ORDER_ID");
        public final static Property CoinType = new Property(1, String.class, "coinType", false, "COIN_TYPE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Amount = new Property(3, double.class, "amount", false, "AMOUNT");
        public final static Property Quantity = new Property(4, double.class, "quantity", false, "QUANTITY");
        public final static Property Price = new Property(5, double.class, "price", false, "PRICE");
        public final static Property Fee = new Property(6, double.class, "fee", false, "FEE");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
        public final static Property TransInfo = new Property(8, String.class, "transInfo", false, "TRANS_INFO");
    }


    public CoinOrderDao(DaoConfig config) {
        super(config);
    }
    
    public CoinOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COIN_ORDER\" (" + //
                "\"ORDER_ID\" TEXT," + // 0: orderId
                "\"COIN_TYPE\" TEXT," + // 1: coinType
                "\"NAME\" TEXT," + // 2: name
                "\"AMOUNT\" REAL NOT NULL ," + // 3: amount
                "\"QUANTITY\" REAL NOT NULL ," + // 4: quantity
                "\"PRICE\" REAL NOT NULL ," + // 5: price
                "\"FEE\" REAL NOT NULL ," + // 6: fee
                "\"STATUS\" INTEGER NOT NULL ," + // 7: status
                "\"TRANS_INFO\" TEXT);"); // 8: transInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COIN_ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CoinOrder entity) {
        stmt.clearBindings();
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(1, orderId);
        }
 
        String coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindString(2, coinType);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindDouble(4, entity.getAmount());
        stmt.bindDouble(5, entity.getQuantity());
        stmt.bindDouble(6, entity.getPrice());
        stmt.bindDouble(7, entity.getFee());
        stmt.bindLong(8, entity.getStatus());
 
        String transInfo = entity.getTransInfo();
        if (transInfo != null) {
            stmt.bindString(9, transInfo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CoinOrder entity) {
        stmt.clearBindings();
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(1, orderId);
        }
 
        String coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindString(2, coinType);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindDouble(4, entity.getAmount());
        stmt.bindDouble(5, entity.getQuantity());
        stmt.bindDouble(6, entity.getPrice());
        stmt.bindDouble(7, entity.getFee());
        stmt.bindLong(8, entity.getStatus());
 
        String transInfo = entity.getTransInfo();
        if (transInfo != null) {
            stmt.bindString(9, transInfo);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CoinOrder readEntity(Cursor cursor, int offset) {
        CoinOrder entity = new CoinOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // orderId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // coinType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getDouble(offset + 3), // amount
            cursor.getDouble(offset + 4), // quantity
            cursor.getDouble(offset + 5), // price
            cursor.getDouble(offset + 6), // fee
            cursor.getInt(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // transInfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CoinOrder entity, int offset) {
        entity.setOrderId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCoinType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAmount(cursor.getDouble(offset + 3));
        entity.setQuantity(cursor.getDouble(offset + 4));
        entity.setPrice(cursor.getDouble(offset + 5));
        entity.setFee(cursor.getDouble(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
        entity.setTransInfo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CoinOrder entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CoinOrder entity) {
        return null;
    }

    @Override
    public boolean hasKey(CoinOrder entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
