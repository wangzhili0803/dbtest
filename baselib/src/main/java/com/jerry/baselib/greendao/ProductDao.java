package com.jerry.baselib.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jerry.baselib.common.bean.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property IsHouse = new Property(3, boolean.class, "isHouse", false, "IS_HOUSE");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Pprice = new Property(5, String.class, "pprice", false, "PPRICE");
        public final static Property IsFree = new Property(6, boolean.class, "isFree", false, "IS_FREE");
        public final static Property IsEntity = new Property(7, boolean.class, "isEntity", false, "IS_ENTITY");
        public final static Property IsNew = new Property(8, boolean.class, "isNew", false, "IS_NEW");
        public final static Property Count = new Property(9, int.class, "count", false, "COUNT");
        public final static Property AdRandom = new Property(10, boolean.class, "adRandom", false, "AD_RANDOM");
        public final static Property FishRandom = new Property(11, boolean.class, "fishRandom", false, "FISH_RANDOM");
        public final static Property FishPond = new Property(12, String.class, "fishPond", false, "FISH_POND");
        public final static Property Price = new Property(13, String.class, "price", false, "PRICE");
        public final static Property Tag = new Property(14, String.class, "tag", false, "TAG");
        public final static Property ReplyWordSwitch = new Property(15, boolean.class, "replyWordSwitch", false, "REPLY_WORD_SWITCH");
        public final static Property Replay = new Property(16, String.class, "replay", false, "REPLAY");
        public final static Property ReplyPicSwitch = new Property(17, boolean.class, "replyPicSwitch", false, "REPLY_PIC_SWITCH");
        public final static Property ReplyPic = new Property(18, String.class, "replyPic", false, "REPLY_PIC");
        public final static Property Link = new Property(19, String.class, "link", false, "LINK");
        public final static Property RemoteImgs = new Property(20, String.class, "remoteImgs", false, "REMOTE_IMGS");
        public final static Property PicPath = new Property(21, String.class, "picPath", false, "PIC_PATH");
        public final static Property Provice = new Property(22, String.class, "provice", false, "PROVICE");
        public final static Property City = new Property(23, String.class, "city", false, "CITY");
        public final static Property District = new Property(24, String.class, "district", false, "DISTRICT");
        public final static Property Trans = new Property(25, String.class, "trans", false, "TRANS");
        public final static Property UpdateTime = new Property(26, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property IsSel = new Property(27, boolean.class, "isSel", false, "IS_SEL");
        public final static Property HireType = new Property(28, int.class, "hireType", false, "HIRE_TYPE");
        public final static Property RoomType = new Property(29, int.class, "roomType", false, "ROOM_TYPE");
        public final static Property Village = new Property(30, String.class, "village", false, "VILLAGE");
        public final static Property HouseRoom = new Property(31, int.class, "houseRoom", false, "HOUSE_ROOM");
        public final static Property HouseHall = new Property(32, int.class, "houseHall", false, "HOUSE_HALL");
        public final static Property HouseToilet = new Property(33, int.class, "houseToilet", false, "HOUSE_TOILET");
        public final static Property Acreage = new Property(34, double.class, "acreage", false, "ACREAGE");
        public final static Property HouseRenovation = new Property(35, int.class, "houseRenovation", false, "HOUSE_RENOVATION");
        public final static Property HouseLabels = new Property(36, String.class, "houseLabels", false, "HOUSE_LABELS");
        public final static Property MoreHouseLabels = new Property(37, String.class, "moreHouseLabels", false, "MORE_HOUSE_LABELS");
    }


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"CONTENT\" TEXT," + // 2: content
                "\"IS_HOUSE\" INTEGER NOT NULL ," + // 3: isHouse
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"PPRICE\" TEXT," + // 5: pprice
                "\"IS_FREE\" INTEGER NOT NULL ," + // 6: isFree
                "\"IS_ENTITY\" INTEGER NOT NULL ," + // 7: isEntity
                "\"IS_NEW\" INTEGER NOT NULL ," + // 8: isNew
                "\"COUNT\" INTEGER NOT NULL ," + // 9: count
                "\"AD_RANDOM\" INTEGER NOT NULL ," + // 10: adRandom
                "\"FISH_RANDOM\" INTEGER NOT NULL ," + // 11: fishRandom
                "\"FISH_POND\" TEXT," + // 12: fishPond
                "\"PRICE\" TEXT," + // 13: price
                "\"TAG\" TEXT," + // 14: tag
                "\"REPLY_WORD_SWITCH\" INTEGER NOT NULL ," + // 15: replyWordSwitch
                "\"REPLAY\" TEXT," + // 16: replay
                "\"REPLY_PIC_SWITCH\" INTEGER NOT NULL ," + // 17: replyPicSwitch
                "\"REPLY_PIC\" TEXT," + // 18: replyPic
                "\"LINK\" TEXT," + // 19: link
                "\"REMOTE_IMGS\" TEXT," + // 20: remoteImgs
                "\"PIC_PATH\" TEXT," + // 21: picPath
                "\"PROVICE\" TEXT," + // 22: provice
                "\"CITY\" TEXT," + // 23: city
                "\"DISTRICT\" TEXT," + // 24: district
                "\"TRANS\" TEXT," + // 25: trans
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 26: updateTime
                "\"IS_SEL\" INTEGER NOT NULL ," + // 27: isSel
                "\"HIRE_TYPE\" INTEGER NOT NULL ," + // 28: hireType
                "\"ROOM_TYPE\" INTEGER NOT NULL ," + // 29: roomType
                "\"VILLAGE\" TEXT," + // 30: village
                "\"HOUSE_ROOM\" INTEGER NOT NULL ," + // 31: houseRoom
                "\"HOUSE_HALL\" INTEGER NOT NULL ," + // 32: houseHall
                "\"HOUSE_TOILET\" INTEGER NOT NULL ," + // 33: houseToilet
                "\"ACREAGE\" REAL NOT NULL ," + // 34: acreage
                "\"HOUSE_RENOVATION\" INTEGER NOT NULL ," + // 35: houseRenovation
                "\"HOUSE_LABELS\" TEXT," + // 36: houseLabels
                "\"MORE_HOUSE_LABELS\" TEXT);"); // 37: moreHouseLabels
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getIsHouse() ? 1L: 0L);
        stmt.bindLong(5, entity.getType());
 
        String pprice = entity.getPprice();
        if (pprice != null) {
            stmt.bindString(6, pprice);
        }
        stmt.bindLong(7, entity.getIsFree() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsEntity() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsNew() ? 1L: 0L);
        stmt.bindLong(10, entity.getCount());
        stmt.bindLong(11, entity.getAdRandom() ? 1L: 0L);
        stmt.bindLong(12, entity.getFishRandom() ? 1L: 0L);
 
        String fishPond = entity.getFishPond();
        if (fishPond != null) {
            stmt.bindString(13, fishPond);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(14, price);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(15, tag);
        }
        stmt.bindLong(16, entity.getReplyWordSwitch() ? 1L: 0L);
 
        String replay = entity.getReplay();
        if (replay != null) {
            stmt.bindString(17, replay);
        }
        stmt.bindLong(18, entity.getReplyPicSwitch() ? 1L: 0L);
 
        String replyPic = entity.getReplyPic();
        if (replyPic != null) {
            stmt.bindString(19, replyPic);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(20, link);
        }
 
        String remoteImgs = entity.getRemoteImgs();
        if (remoteImgs != null) {
            stmt.bindString(21, remoteImgs);
        }
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(22, picPath);
        }
 
        String provice = entity.getProvice();
        if (provice != null) {
            stmt.bindString(23, provice);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(24, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(25, district);
        }
 
        String trans = entity.getTrans();
        if (trans != null) {
            stmt.bindString(26, trans);
        }
        stmt.bindLong(27, entity.getUpdateTime());
        stmt.bindLong(28, entity.getIsSel() ? 1L: 0L);
        stmt.bindLong(29, entity.getHireType());
        stmt.bindLong(30, entity.getRoomType());
 
        String village = entity.getVillage();
        if (village != null) {
            stmt.bindString(31, village);
        }
        stmt.bindLong(32, entity.getHouseRoom());
        stmt.bindLong(33, entity.getHouseHall());
        stmt.bindLong(34, entity.getHouseToilet());
        stmt.bindDouble(35, entity.getAcreage());
        stmt.bindLong(36, entity.getHouseRenovation());
 
        String houseLabels = entity.getHouseLabels();
        if (houseLabels != null) {
            stmt.bindString(37, houseLabels);
        }
 
        String moreHouseLabels = entity.getMoreHouseLabels();
        if (moreHouseLabels != null) {
            stmt.bindString(38, moreHouseLabels);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getIsHouse() ? 1L: 0L);
        stmt.bindLong(5, entity.getType());
 
        String pprice = entity.getPprice();
        if (pprice != null) {
            stmt.bindString(6, pprice);
        }
        stmt.bindLong(7, entity.getIsFree() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsEntity() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsNew() ? 1L: 0L);
        stmt.bindLong(10, entity.getCount());
        stmt.bindLong(11, entity.getAdRandom() ? 1L: 0L);
        stmt.bindLong(12, entity.getFishRandom() ? 1L: 0L);
 
        String fishPond = entity.getFishPond();
        if (fishPond != null) {
            stmt.bindString(13, fishPond);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(14, price);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(15, tag);
        }
        stmt.bindLong(16, entity.getReplyWordSwitch() ? 1L: 0L);
 
        String replay = entity.getReplay();
        if (replay != null) {
            stmt.bindString(17, replay);
        }
        stmt.bindLong(18, entity.getReplyPicSwitch() ? 1L: 0L);
 
        String replyPic = entity.getReplyPic();
        if (replyPic != null) {
            stmt.bindString(19, replyPic);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(20, link);
        }
 
        String remoteImgs = entity.getRemoteImgs();
        if (remoteImgs != null) {
            stmt.bindString(21, remoteImgs);
        }
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(22, picPath);
        }
 
        String provice = entity.getProvice();
        if (provice != null) {
            stmt.bindString(23, provice);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(24, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(25, district);
        }
 
        String trans = entity.getTrans();
        if (trans != null) {
            stmt.bindString(26, trans);
        }
        stmt.bindLong(27, entity.getUpdateTime());
        stmt.bindLong(28, entity.getIsSel() ? 1L: 0L);
        stmt.bindLong(29, entity.getHireType());
        stmt.bindLong(30, entity.getRoomType());
 
        String village = entity.getVillage();
        if (village != null) {
            stmt.bindString(31, village);
        }
        stmt.bindLong(32, entity.getHouseRoom());
        stmt.bindLong(33, entity.getHouseHall());
        stmt.bindLong(34, entity.getHouseToilet());
        stmt.bindDouble(35, entity.getAcreage());
        stmt.bindLong(36, entity.getHouseRenovation());
 
        String houseLabels = entity.getHouseLabels();
        if (houseLabels != null) {
            stmt.bindString(37, houseLabels);
        }
 
        String moreHouseLabels = entity.getMoreHouseLabels();
        if (moreHouseLabels != null) {
            stmt.bindString(38, moreHouseLabels);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.getShort(offset + 3) != 0, // isHouse
            cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pprice
            cursor.getShort(offset + 6) != 0, // isFree
            cursor.getShort(offset + 7) != 0, // isEntity
            cursor.getShort(offset + 8) != 0, // isNew
            cursor.getInt(offset + 9), // count
            cursor.getShort(offset + 10) != 0, // adRandom
            cursor.getShort(offset + 11) != 0, // fishRandom
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fishPond
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // price
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // tag
            cursor.getShort(offset + 15) != 0, // replyWordSwitch
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // replay
            cursor.getShort(offset + 17) != 0, // replyPicSwitch
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // replyPic
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // link
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // remoteImgs
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // picPath
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // provice
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // city
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // district
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // trans
            cursor.getLong(offset + 26), // updateTime
            cursor.getShort(offset + 27) != 0, // isSel
            cursor.getInt(offset + 28), // hireType
            cursor.getInt(offset + 29), // roomType
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // village
            cursor.getInt(offset + 31), // houseRoom
            cursor.getInt(offset + 32), // houseHall
            cursor.getInt(offset + 33), // houseToilet
            cursor.getDouble(offset + 34), // acreage
            cursor.getInt(offset + 35), // houseRenovation
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // houseLabels
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37) // moreHouseLabels
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsHouse(cursor.getShort(offset + 3) != 0);
        entity.setType(cursor.getInt(offset + 4));
        entity.setPprice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsFree(cursor.getShort(offset + 6) != 0);
        entity.setIsEntity(cursor.getShort(offset + 7) != 0);
        entity.setIsNew(cursor.getShort(offset + 8) != 0);
        entity.setCount(cursor.getInt(offset + 9));
        entity.setAdRandom(cursor.getShort(offset + 10) != 0);
        entity.setFishRandom(cursor.getShort(offset + 11) != 0);
        entity.setFishPond(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPrice(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTag(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setReplyWordSwitch(cursor.getShort(offset + 15) != 0);
        entity.setReplay(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setReplyPicSwitch(cursor.getShort(offset + 17) != 0);
        entity.setReplyPic(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLink(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRemoteImgs(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPicPath(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setProvice(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCity(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDistrict(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTrans(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setUpdateTime(cursor.getLong(offset + 26));
        entity.setIsSel(cursor.getShort(offset + 27) != 0);
        entity.setHireType(cursor.getInt(offset + 28));
        entity.setRoomType(cursor.getInt(offset + 29));
        entity.setVillage(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setHouseRoom(cursor.getInt(offset + 31));
        entity.setHouseHall(cursor.getInt(offset + 32));
        entity.setHouseToilet(cursor.getInt(offset + 33));
        entity.setAcreage(cursor.getDouble(offset + 34));
        entity.setHouseRenovation(cursor.getInt(offset + 35));
        entity.setHouseLabels(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setMoreHouseLabels(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Product entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
